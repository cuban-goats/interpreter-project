#include <stddef.h>
#include <stdio.h>
#include <stdlib.h> // For malloc
#include <string.h>

#define ROWS 50
#define COLS 1000
#define MAX_INSTRUCTIONS 20 // Maximum instructions per row
#define MAX_OPCODE 200
#define MAX_LABELLENGTH 20 
#define MAX_LABELS 9

// Function prototypes
int open_file(const char *fileName, FILE **filepointer);
void read_file(FILE *filepointer, char program[ROWS][COLS], int *line_count);
void split_and_store(char program[ROWS][COLS], int line_count,
                     char instructions[ROWS][MAX_INSTRUCTIONS][COLS]);
void get_labels(char labels[MAX_LABELLENGTH][MAX_LABELS], int line_count,
                char instructions[ROWS][MAX_INSTRUCTIONS][COLS]);
void print_instructions(char instructions[ROWS][MAX_INSTRUCTIONS][COLS],
                        int line_count);

int main(int argc, char *argv[]) {
  if (argc < 2) {
    printf("Usage: %s <file_name>\n", argv[0]);
    return 1;
  }

  const char *fileName = argv[1]; // Get filepath
  char program[ROWS][COLS];       // Declare the array
  FILE *filepointer = NULL;

  // Open the file
  if (open_file(fileName, &filepointer) != 0) {
    return 1;
  }

  // Read the file and store lines
  int line_count = 0;
  read_file(filepointer, program, &line_count);

  // split and store the contents of the file
  char instructions[ROWS][MAX_INSTRUCTIONS][COLS] = {0}; // Fixed-size 3D array
  split_and_store(program, line_count, instructions);

  // get labels and print it
  char labels[MAX_LABELLENGTH][MAX_LABELS];

  // is just the pointer to instructions
  char *instruction[ROWS][MAX_INSTRUCTIONS][COLS];
  get_labels(labels, line_count, instructions);
  
  // Print the instructions
  print_instructions(instructions, line_count);

  // Close the file
  fclose(filepointer);

  return 0;
}

// Function to open the file and check for errors
int open_file(const char *fileName, FILE **filepointer) {
  *filepointer = fopen(fileName, "r");
  if (*filepointer == NULL) {
    perror("Error opening file");
    return 1;
  }
  return 0;
}

// Function to read the file line by line into the program array
void read_file(FILE *filepointer, char program[ROWS][COLS], int *line_count) {
  while (fgets(program[*line_count], COLS, filepointer) != NULL) {
    // Remove newline if present
    size_t len = strlen(program[*line_count]);
    if (len > 0 && program[*line_count][len - 1] == '\n') {
      program[*line_count][len - 1] = '\0';
    }
    (*line_count)++;

    if (*line_count >= ROWS) {
      printf("Warning: More lines than ROWS. Some data might be truncated.\n");
      break;
    }
  }
}

// Function to split and store the content of the program array
void split_and_store(char program[ROWS][COLS], int line_count,
                     char instructions[ROWS][MAX_INSTRUCTIONS][COLS]) {
  for (int i = 0; i < line_count; i++) {
    char temp[COLS];
    strcpy(temp, program[i]); // Copy each line to a temporary buffer

    int instruction_index = 0;
    char *instruction = strtok(temp, " "); // split by space

    // Store instructions in the array
    while (instruction != NULL && instruction_index < MAX_INSTRUCTIONS) {
      // Copy the instruction into the fixed-size array
      strncpy(instructions[i][instruction_index], instruction, COLS - 1);
      instructions[i][instruction_index][COLS - 1] =
          '\0'; // Ensure null-termination
      instruction_index++;
      instruction = strtok(NULL, " "); // Get next instruction
    }
  }
}

// function to copy labels into new array

void get_labels(char labels[MAX_LABELLENGTH][MAX_LABELS], int line_count,
                char instructions[ROWS][MAX_INSTRUCTIONS][COLS]) {
  // To keep track of where to store the labels in the array
  int labels_index = 0;
  for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < MAX_INSTRUCTIONS; j++) {
      for (int k = 0; k < COLS; k++) {
        if (instructions[i][j][k] == ':') {
          printf("%s \n", instructions[i][j]);
          memcpy(labels[MAX_LABELLENGTH][MAX_LABELS], instructions[i][j], MAX_LABELS);
        }
      }
    }
  }
  // print individual labels
}

// Function to print all labels and tokens
void print_instructions(char instructions[ROWS][MAX_INSTRUCTIONS][COLS],
                        int line_count) {
  for (int i = 0; i < line_count; i++) {
    for (int j = 0; j < MAX_INSTRUCTIONS; j++) {
      if (instructions[i][j][0] !=
          '\0') { // Only print if the instruction exists
        printf("%s\n", instructions[i][j]);
      }
    }
  }
}
